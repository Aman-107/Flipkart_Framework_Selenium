package TestCases;

import java.time.Duration;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.Test;

import PageObjects.HomePage;
import PageObjects.SearchPage;
import TestComponents.BaseTest;
import Utilities.WindowHandler;

public class Optimised_Code extends BaseTest {

	ChromeDriver driver = invokeDriver();
	HomePage homePage = new HomePage(driver);
	SearchPage searchPage = new SearchPage(driver);
	WindowHandler windowHandler = new WindowHandler(driver);
	
	@Test
	public void Search_Functionality_Filters() throws InterruptedException {
		
		double queryRating = 3.0;
		int castRating = (int) queryRating;
		
		homePage.landingPage();
		homePage.searchBox();

		searchPage.brandsFilter();
		searchPage.priceFilter("50000", "₹75000+");
		searchPage.customerRatingFilter(castRating); // Customer Ratings
		searchPage.sorting(); // Price high to low
		
		List<WebElement> ratings = driver.findElements(By.cssSelector(".XQDdHH")); // total products in the page
		
		// Applied Filters
		List<WebElement> filtersApplied = driver.findElements(By.cssSelector(".YcSYyC"));
		for(int i=0; i<filtersApplied.size(); i++) {
			System.out.println(driver.findElements(By.cssSelector(".YcSYyC")).get(i).getText());
		}

		// Pricing Order Verification
		for (int i = 0; i < ratings.size(); i++) {
		String rawPrice = driver.findElement(By.cssSelector(".Nx9bqj._4b5DiR")).getText().split("₹")[1];
		int compaPrice = 0;
		int price = Integer.parseInt(rawPrice.replace(",", "")); 
					
		if(compaPrice > price) {
		System.out.println("sorting not working at:" + driver.findElement(By.xpath("(//div[@class='KzDlHZ'])[" + i + "]")).getText());
		}
		 }
			// Ratings Verification
		for (int i = 1; i <=ratings.size(); i++) {
		double pdtRating = Double.parseDouble((driver.findElement(By.xpath("(//div[@class='XQDdHH'])[" + i + "]")).getText()));
			if (pdtRating < queryRating) {
				System.out.println(driver.findElement(By.xpath("(//div[@class='KzDlHZ'])[" + i + "]")).getText());
			}
				}

				// sorting verification
				String expectedSort = driver.findElement(By.cssSelector(".zg-M3Z._0H7xSG")).getText();
				Assert.assertEquals(expectedSort, "Newest First");
	}
	
	
	@Test
	public void addingMultipleProductsCart() throws InterruptedException {
           
		windowHandler.parentChildWinowHandles("221007",5);
		windowHandler.closeAllWindowExceptMain();	
		
		
		}
	}	
		// Clean up
		// driver.quit();


/*
 ### **Scenario 3: Validate Adding Multiple Products to Cart**  
**Steps:**  
1. Search for and add multiple products to the cart.  
2. Navigate to the cart page.  
3. Verify the total price calculation.  
4. Remove one item from the cart.  

**Validation Points:**  
- All added products are displayed in the cart.  
- Total price is calculated accurately.  
- Cart updates correctly when an item is removed.

---
 *
 */